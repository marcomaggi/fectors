-*- coding: utf-8-with-signature -*-

		     Functional Vectors
		     ==================


Topics
------

  1. Introduction
  2. License
  3. Install
  4. Usage
  A. Credits
  B. Bugs
  C. Resources


1. Introduction
---------------

Functional  programming  needs functional  data  structures.
This is an implementation of "vectors" (also called arrays),
a finite  map keyed  by consecutive  integers between  0 and
n-1, n  being the length  of the vector.   Being functional,
the structure is not observably  mutatable, and so access to
any version will always give the correct answer.

  There  are many  possible  implementations  of the  vector
interface with different efficiency characteristics, the one
contained prioritises "single threaded" use of vectors, that
is,  one in  which access  is  most frequently  to the  last
created version of the  vector.  Access to previously stored
versions works  correctly, though  it will  not be  quite as
efficient.

  This package is just a  repackaging of Ian Price's Fectors
with GNU  Autotools for package infrastructure  and verified
support for Vicare Scheme.

  *NOTE* The  maintainer of  this repackaging  supports only
the GNU infrastructure and tests only on a GNU+Linux system.


2. License
----------

See the LICENSE file.


3. Install
----------

To install  Fectors from a  proper release tarball,  we must
unpack the archive then do:

    $ cd fectors-0.2a0
    $ mkdir build
    $ cd build

to inspect the available configuration options we do:

    $ ../configure --help

and then to build and install the package:

    $ ../configure [options]
    $ make
    $ make check
    $ make install

  The Makefile supports the  DESTDIR environment variable to
install files in a temporary  location, example: to see what
will happen:

    $ make -n install DESTDIR=/tmp/fectors

to really do it:

    $ make install DESTDIR=/tmp/fectors

  If,  instead, we  have  checked out  a  revision from  the
branch "vicare-scheme"  in the  repository, we will  have to
first build the infrastructure running a script from the top
source directory:

   $ cd fectors
   $ sh autogen.sh

after this the procedure is the same as the one for building
from  a  proper  release  tarball, but  we  have  to  enable
maintainer mode:

    $ ../configure --enable-maintainer-mode [options]
    $ make
    $ make check
    $ make install

  Libraries are installed under the directory:

		  $(libdir)/vicare-scheme

  After  installation, the  makefile rule  "vfasl-installed"
will  precompile the  libraries installed  in the  hierarchy
(fectors ---); the makefile rule "installcheck" will run the
test suite against the installed libraries.

  The variable VFLAGS is available  to the user when running
"configure" and  "make" to add  command line options  to the
execution of  "vicare" when compiling libraries  and running
tests; for example:

   $ make VFLAGS="-g -O2 --print-loaded-libraries"


4. Usage
--------

Read the documentation in Texinfo format.


A. Credits
----------

See  the   flie  LICENSE  for   the  list  of   authors  and
contributors.


B. Bugs
-------

Bug reports about Fectors should be reported to the original
site:

	      <https://github.com/ijp/fectors>

while issues  regarding repackaging  with the  GNU Autotools
and support for Vicare Scheme must be reported to:

	  <https://github.com/marcomaggi/fectors>


C. Resources
------------

The latest version of Fectors for Vicare Scheme can be found
here:

  <http://sourceforge.net/projects/vicare-fectors/files/>

development takes place at:

	  <http://github.com/marcomaggi/fectors/>

in the "vicare-scheme" branch; and as backup at:

     <http://sourceforge.net/projects/vicare-fectors/>

the documentation is available online:

      <http://marcomaggi.github.com/docs/fectors.html>

  The original Fectors can be found here:

	      <https://github.com/ijp/fectors>

  The GNU Project software can be found here:

		   <http://www.gnu.org/>

  Vicare Scheme is available at:

	 <http://marcomaggi.github.com/vicare.html>


### end of file
# Local Variables:
# mode: text
# End:
